#include <bits/stdc++.h>
#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;

const int MAX = 100009;

int Stack[MAX], top;
int Index[MAX], Lowlink[MAX], Onstack[MAX];
int Component[MAX], Outdeg[MAX];
int idx, components;
vector< int > G[MAX];
vector<int>SS[MAX];




void tarjan(int u, int par)
{
    int v, i, sz = G[u].size();
    Index[u] = Lowlink[u] = idx++;
    Stack[top++] = u;
    Onstack[u] = 1;
    for(i = 0; i < sz; i++)
    {
        v = G[u][i];
        if(v == par) continue;
        if(Index[v]==-1)
        {
            tarjan(v, u);
            Lowlink[u] = min(Lowlink[u], Lowlink[v]);
        }
        else if(Onstack[v]) Lowlink[u] = min(Lowlink[u], Index[v]);
    }
    if(Lowlink[u] == Index[u])
    {
        components++;
        do
        {
            v = Stack[--top];
            Onstack[v] = 0;
            Component[v] = components;
        }
        while(u != v);
    }
}
int cost[MAX];

void findSCC(int n)
{
    components = top = idx = 0;
    memset(Index, -1, sizeof Index);
    memset(Onstack, 0, sizeof Onstack);
    memset(Lowlink, 0x3f, sizeof Lowlink);

    for(int i = 1; i <= n; i++) if(Index[i]==-1) tarjan(i, -1);
}

long long modv=1000000007;
int main()
{
    int n, e, i, u, v;
    //freopen("in.txt", "r", stdin);
    //while(scanf("%d", &n) == 1 && n) {
    scanf("%d",&n);
    scanf("%d", &e);
    //for(i = 1; i <= n; i++) G[i].clear();
    for(i = 0; i < e; i++)
    {
        scanf("%d %d", &u, &v);
        G[u].push_back(v);
        G[v].push_back(u);
    }
    findSCC(n);
    //memset(Outdeg, 0, sizeof Outdeg);
    int compNo=1;
    for(u = 1; u <= n; u++)
    {
        compNo=max(compNo,Component[u]);
        SS[Component[u]].push_back(cost[u]);
        //printf("%d %d\n",u,Component[u]);
    }
    cout << components<<endl;

    for(i = 1; i <= n; i++)
        cout<<i<<" "<<Component[i]<<endl;

    //}
    return 0;
}
/*
6 7
1 2
2 3
3 1
2 4
4 5
5 6
6 4

4 4
1 2
1 3
2 3
1 4


*/
